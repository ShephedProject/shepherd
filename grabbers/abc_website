#!/usr/bin/env perl

# ABC/ABC2/ABC3/ABC News 24 au_tv guide grabber - runs from "Shepherd" master grabber
#  * written by ltd
#  * uses ABC website for ABC ABC2 ABC3 ABC News 24 data
#  * when used in conjunction with Shepherd, shepherd can collect other channels
#    using other grabbers
#  * this does NOT use any config file - all settings are passed in from shepherd

#  changelog:
#    1.50  22sep06      added support for "shepherd" master grabber script
#    1.51  02oct06      --ready option
#    1.52  03oct06      split out abc grabber into its own grabber
#    1.55  09oct06      formalize --cheap option
#    1.56  20oct06      misc cleanups
#    1.60  11nov06	fix midday time calculation
#    1.70  16nov06	also use "printable" TV guide to determine 'station close'
#    2.00  23nov06	simplified
#    3.00  23may07      merged abc1/abc2 together again, abc_website now does both!
#    3.04  12jun07	abc website format change
#    3.23  01dec09	added abc3
#    4.00  14aug10	new website format, much redesign, added abc4/abchd/"ABC News 24"
#    5.00  15jul14      new website format
#    6.00  ????     ????
#    7.00  30mar18  Complete rewrite, json epg, does other FTA too, at lower quality

use strict;
use warnings;

my $progname = "abc_website";
my $version = "7.03";

use XMLTV;
use POSIX qw(strftime mktime);
use Getopt::Long;
use HTML::TreeBuilder;
use Shepherd::Common;
use JSON;
use DateTimeFormat::XMLTV;

#
# constants
#
my $guide_url = "http://epg.abctv.net.au/processed/%s_%s.json";

#
# some initial cruft
#

my $script_start_time = time;
my %stats;
my $channels, my $opt_channels, my $gaps;
my $data_cache;
my $override_settings = { };
my $writer;
$| = 1;


#
# parse command line
#

my $opt_days =          8;
my $opt_offset =        0;
my $opt_outputfile =    "output.xmltv";
my $opt_configfile =    $progname.".conf";
my $opt_cache_file =	$progname.".storable.cache";
my $opt_channels_file=  "";
my $opt_gaps_file=  "";
my $opt_no_cache =	0;
my $opt_cheap =		0;
my $opt_fast =          0;
my $opt_do_extra_days =	0;
my $opt_no_hdtv_flag =	0;
my $opt_set = "";
my $opt_help =          0;
my $opt_version =       0;
my $opt_desc =          0;
my $debug =             0;
my $lang =              "en";
my $region =            94;
my $time_offset =       0;
my $ignored_setting;

GetOptions(
	'region=i'	=> \$region,
	'days=i'	=> \$opt_days,
	'offset=i'	=> \$opt_offset,
	'timezone=s'	=> \$ignored_setting,
	'channels_file=s' => \$opt_channels_file,
	'gaps_file=s' => \$opt_gaps_file,
	'output=s'	=> \$opt_outputfile,
	'config-file=s'	=> \$opt_configfile,
	'cache-file=s'	=> \$opt_cache_file,
	'do-extra-days' => \$opt_do_extra_days,
	'fast'		=> \$opt_fast,
	'no-cache'	=> \$opt_no_cache,
	'cheap'		=> \$opt_cheap,
	'debug+'	=> \$debug,
	'warper'	=> \$ignored_setting,
	'lang=s'	=> \$lang,
	'obfuscate'	=> \$ignored_setting,
	'no-retry'	=> \$ignored_setting,
	'set=s'		=> \$opt_set,
	'no_hdtv_flag'	=> \$opt_no_hdtv_flag,
	'help'		=> \$opt_help,
	'verbose'	=> \$opt_help,
	'version'	=> \$opt_version,
	'ready'		=> \$opt_version,
	'desc'		=> \$opt_desc,
	'v'		=> \$opt_help);

&help if ($opt_help);

if ($opt_version || $opt_desc) {
	printf "%s %s\n",$progname,$version;
	printf "%s is a details-aware grabber that collects decent quality data using the ABC website for ABC/ABC2/4/ABC3/ABC News 24.",$progname if $opt_desc;
	exit(0);
}

&set_override if ($opt_set ne "");

die "no channel file specified, see --help for instructions\n", if ($opt_channels_file eq "");

# set defaults
&Shepherd::Common::set_default("debug", (defined $debug ? ($debug * 2) : 0));
&Shepherd::Common::set_defaults(stats => \%stats, referer => "last");
Shepherd::Common::setup_ua('agent' => 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-us)');

my %abc_channel_to_shep = (
	"ABC1"     => "ABC",
	"ABC2"     => "ABC COMEDY/ABC KIDS",
	"ABC3"     => "ABCME",
	"ABC4KIDS" => "ABC COMEDY/ABC KIDS",
	"ABCHD"    => "ABC HD",
	"ABCN"     => "ABCNEWS",
        "7"        => "Seven",
        "7FO"      => "7food network",
        "7MATE"    => "7mate",
        "RTV"      => "RACING.COM",
        "TENHD"    => "10 HD",
        "ONE"      => "10 Bold",
        "11"       => "10 Peach",
        "SPREE"    => "SpreeTV",
        "9"        => "Nine",
        "YMON"    => "Your Money",
        "GEM"      => "9Gem",
        "GO"       => "9Go!",
        "EXTRA"    => "Extra",
        "SBS2"     => "SBSVICELAND",
        "VICHD"    => "SBSVICELANDHD",
        "SBS3"     => "SBS Food",
        "SBSHD"    => "SBS HD",
	"44"       => "44Adelaide",
	"SC"       => "SCTV",
	"SCHD"     => "SCTVHD",
	"TDHD"     => "TDTHD"
);

my %region_to_tz = (
	63  => 'Australia/Broken_Hill',
	66  => 'Australia/Sydney',
	67  => 'Australia/Sydney',
	69  => 'Australia/Sydney',
	71  => 'Australia/Sydney',
	73  => 'Australia/Sydney',
	74  => 'Australia/Darwin',
	75  => 'Australia/Brisbane',
	78  => 'Australia/Brisbane',
	79  => 'Australia/Brisbane',
	81  => 'Australia/Adelaide',
	82  => 'Australia/Adelaide',
	83  => 'Australia/Adelaide',
	85  => 'Australia/Adelaide',
	86  => 'Australia/Adelaide',
	88  => 'Australia/Hobart',
	90  => 'Australia/Melbourne',
	93  => 'Australia/Melbourne',
	94  => 'Australia/Melbourne',
	95  => 'Australia/Melbourne',
	98  => 'Australia/Melbourne',
	101 => 'Australia/Perth',
	102 => 'Australia/Perth',
	106 => 'Australia/Sydney',
	107 => 'Australia/Adelaide',
	108 => 'Australia/Darwin',
	114 => 'Australia/Brisbane',
	126 => 'Australia/Canberra',
	184 => 'Australia/Sydney',
	253 => 'Australia/Brisbane',
	254 => 'Australia/Brisbane',
	255 => 'Australia/Brisbane',
	256 => 'Australia/Brisbane',
	257 => 'Australia/Brisbane',
	258 => 'Australia/Brisbane',
	259 => 'Australia/Sydney',
	261 => 'Australia/Sydney',
	262 => 'Australia/Sydney',
	263 => 'Australia/Sydney',
	264 => 'Australia/Sydney',
	266 => 'Australia/Melbourne',
	267 => 'Australia/Melbourne',
	268 => 'Australia/Melbourne',
	342 => 'Australia/Perth'
);

my $local_tz = $region_to_tz{$region};

#
# go go go!
#

#&read_cache if ($opt_no_cache == 0);

# read channels file
die "WARNING: channels file $opt_channels_file could not be read: $!\n" if (!-r $opt_channels_file);
local (@ARGV, $/) = ($opt_channels_file);
no warnings 'all'; eval <>; die "$@" if $@;

&log(sprintf "Going to %s%s %s%d%s days%s of data into %s",
	($opt_gaps_file ne "" ? "micro-gap " : ""),
	($opt_cheap ? "verify (cache-validate)" : "grab"),
	($opt_do_extra_days ? "somewhere between " : ""),
	$opt_days,
	($opt_do_extra_days ? " to 28" : ""),
	($opt_offset ? " (skipping first $opt_offset days)" : ""),
	$opt_outputfile);

# if just filling in microgaps, parse gaps
if ($opt_gaps_file ne "") {
	die "WARNING: gaps_file $opt_gaps_file could not be read: $!\n" if (!-r $opt_gaps_file);
	local (@ARGV, $/) = ($opt_gaps_file);
	no warnings 'all'; eval <>; die "$@" if $@;
}

my %writer_args = ( encoding => 'ISO-8859-1' );
my $fh = new IO::File(">$opt_outputfile") || die "can't open $opt_outputfile: $!";
$writer_args{OUTPUT} = $fh;

$writer = new XMLTV::Writer(%writer_args);
$writer->start( { 'source-info-name'   => "$progname $version", 'generator-info-name' => "$progname $version"} );

my $today = DateTime->today();
my $abc_region;
my $do_all_fta = 1;

if ($region == 81){
	$abc_region = "Adelaide";
} elsif ($region == 75){
	$abc_region = "Brisbane";
} elsif ($region == 126){
	$abc_region = "Canberra";
} elsif($region == 74){
	$abc_region = "Darwin";
} elsif ($region == 78){
	$abc_region = "GoldCoast";
} elsif ($region == 88) {
	$abc_region = "Hobart";
} elsif ($region == 94) {
	$abc_region = "Melbourne";
} elsif ($region == 101) {
	$abc_region = "Perth";
} elsif ($region == 73){
	$abc_region = "Sydney";
} elsif ($region == 257) {
	$abc_region = "Townsville";
} else { #exact match not found, go state generic, disable non-abc
	$do_all_fta = 0;
	&log("Skipping non ABC channels, as exact region match not found");
	if ($region =~ /^(93|94|95|90|98|266|267|268)$/) {
		$abc_region = "Victoria";
	} elsif ($region =~ /^(73|66|67|63|69|71|106|184|259|261|262|263|264)$/) {
		$abc_region = "New South Wales";
	} elsif ($region =~ /^(75|78|255|256|258|254|253|257|79|114)$/) {
		$abc_region = "Queensland";
	} elsif ($region =~ /^(101|102)$/) {
		$abc_region = "Western Australia";
	} elsif ($region =~ /^(81|82|83|85|86|107)$/) {
		$abc_region = "South Australia";
	} elsif ($region =~ /^(74|108)$/) {
		$abc_region = "Northern Territory";
	} elsif ($region =~ /^(126)$/) {
		$abc_region = "Canberra";
	} elsif ($region =~ /^(88)$/) {
		$abc_region = "Tasmania";
	} else {
		$abc_region = "Queensland";
	}
}

my @abc_channels = ("ABC1","ABC2","ABC3", "ABC4KIDS","ABCHD","ABCN");

for my $channel (sort keys %{$channels}) {
	next unless ($do_all_fta || $channel =~ m/^ABC/i);
	$writer->write_channel( {'display-name' => [[ $channel, $lang ]], 'id' => $channels->{$channel}} );
}

for my $channel (sort keys %{$opt_channels}) {
	next unless ($do_all_fta || $channel =~ m/^ABC/i);
	$writer->write_channel( {'display-name' => [[ $channel, $lang ]], 'id' => $opt_channels->{$channel}} );
}

for (my $day = $opt_offset; $day < $opt_offset+$opt_days; $day++){
	my $datetime = $today->clone()->add('days' => $day);
	my $daystr = sprintf("%02d-%02d-%02d", $datetime->year(), $datetime->month(), $datetime->day());
	get_day_data($daystr);
}

#&write_cache if ($opt_no_cache == 0);

$writer->end;

&Shepherd::Common::print_stats($progname, $version, $script_start_time, %stats);
exit(0);

######################################################################################################
# help

sub help
{
	print<<EOF
$progname $version

options are as follows:
	--help			show these help options
	--days=N		fetch 'n' days of data (default: $opt_days)
	--output=file		send xml output to file (default: "$opt_outputfile")
	--config-file=file	(ignored - historically used by grabbers not not this one)
	--no-cache		don't use a cache to optimize (reduce) number of web queries (unused)
	--cheap			validate contents of cache - fetch summary only, not details
	--cache-file=file	where to store cache (default "$opt_cache_file")
	--fast			don't run slow - get data as quick as you can - not recommended
	--debug			increase debug level
	--do-extra-days		fetch extra (21 days) from ABC website
	--lang=[s]		set language of xmltv output data (default $lang)
	--no_hdtv_flag		don't flag HDTV programmes

	--region=N		set region for where to collect data from (default: $region)
	--channels_file=file	where to get channel data from (if not set manually)

	--set (option):(1/0)	setting override options (1=enable, 0=disable)
		do_extra_days:1/0   enable/disable fetching up to 24 days
		fast:1/0            enable/disable extra-fast grab speed (not recommended)
		debug:1/0           enable/disable debugging

EOF
;

	exit(0);
}

######################################################################################################

sub set_override
{
	&read_cache;
	my ($setting, $val) = split(/:/,$opt_set);

	die "--set format is (setting):(value) where value is 0 for disable, 1 for enable.\n"
	  if (($val ne "0") && ($val ne "1"));

	die "unknown '--set' parameter '$setting', see --help for details.\n"
	  if (($setting ne "do_extra_days") &&
	      ($setting ne "fast") &&
	      ($setting ne "debug"));

	$override_settings->{$setting} = $val;
	printf "%s: override parameter %s: %s\n", $progname, $setting, ($val eq "0" ? "disabled" : "enabled");

	&write_cache;
	exit(0);
}

######################################################################################################
# populate cache

sub read_cache
{
	my $store = Shepherd::Common::read_cache(\$opt_cache_file);
	
	if ($store) {
		$data_cache = $store->{data_cache};
		$override_settings = $store->{override_settings};

		# apply settings overrides
		$opt_do_extra_days = 1 if ((defined $override_settings->{do_extra_days}) && ($override_settings->{do_extra_days} == 1));
		$opt_fast = 1 if ((defined $override_settings->{fast}) && ($override_settings->{fast} == 1));
		$debug = 1 if ((defined $override_settings->{debug}) && ($override_settings->{debug} > 0));
	}
}

######################################################################################################
# write out updated cache

sub write_cache
{
	# cleanup old entries from cache
	for my $cache_key (keys %{$data_cache}) {
		my ($starttime, @rest) = split(/,/,$cache_key);
		if ($starttime < ($script_start_time - (2*24*60*60))) {
			delete $data_cache->{$cache_key};
			$stats{removed_items_from_cache}++;
		}
	}

	my $store;
	$store->{data_cache} = $data_cache;
	$store->{override_settings} = $override_settings;
	Shepherd::Common::write_cache($opt_cache_file, $store);
}

######################################################################################################

sub get_day_data
{
	my ($daystr) = @_;
	my $url = sprintf($guide_url, $abc_region, $daystr);
	my $data = Shepherd::Common::get_url($url);
	if (!$data){
		&log("Data empty for $url");
		return;
	}

	$data =~ s/\\u2018/\\u0027/g;#single quote
	$data =~ s/\\u2019/\\u0027/g;#single quote
	$data =~ s/\\u201C/\\u0022/gi;#doublequote
	$data =~ s/\\u201D/\\u0022/gi;#doublequote
	$data =~ s/\\u2013/-/g;#en-dash
	$data =~ s/\\u2026/.../g;#ellipsis

	my $decoded_data = JSON::decode_json($data);
	if (!defined $decoded_data->{schedule}){
		&log("Schedule not found in $url");
		return;
	}

	foreach my $schedule (@{$decoded_data->{schedule}}){
		my $chan = $schedule->{channel};
		die "empty chan wut" if $chan eq "";
		$chan = $abc_channel_to_shep{$chan} if defined $abc_channel_to_shep{$chan};
		unless (defined $channels->{$chan} && ($do_all_fta || $chan =~ m/^ABC/i)){
			&log("Skipping unwanted or unknown channel '$chan'");
			next;
		}
		foreach my $programme (@{$schedule->{listing}}){
			my %prog;
			unless (defined $programme->{start_time} && $programme->{start_time} =~ m/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})/){
				&log("Start time didnt match or not present; '$programme->{start_time}'");
				next;
			}
			my $starttime = DateTime->new(
				year      => $1,
				month     => $2,
				day       => $3,
				hour      => $4,
				minute    => $5,
				second    => $6,
				time_zone => $local_tz
			);
			unless (defined $programme->{end_time} && $programme->{end_time} =~ m/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})/){
				&log("End time didnt match or not present; '$programme->{end_time}'");
				next;
			}
			my $endtime = DateTime->new(
				year      => $1,
				month     => $2,
				day       => $3,
				hour      => $4,
				minute    => $5,
				second    => $6,
				time_zone => $local_tz
			);

			if ($programme->{title} =~ m/programs resume/i){
				&log("skipping station close '$programme->{title}' on '$chan'");
				next;
			}

			$prog{'start'} = DateTimeFormat::XMLTV->format_datetime($starttime);
			$prog{'stop'} = 	DateTimeFormat::XMLTV->format_datetime($endtime);

			$prog{'channel'} = $channels->{$chan} if (defined $channels->{$chan});
			$prog{'channel'} = $opt_channels->{$chan} if (defined $opt_channels->{$chan});

			$prog{'title'} = 	[[ Encode::encode( 'iso-8859-1',$programme->{title}), $lang ]] if (defined $programme->{title});
			$prog{'desc'} = 	[[ Encode::encode( 'iso-8859-1',$programme->{description}), $lang ]] if (defined $programme->{description} && $programme->{description} ne "Synopsis");
			$prog{'sub-title'} = 	[[ Encode::encode( 'iso-8859-1',$programme->{episode_title}), $lang ]] if (defined $programme->{episode_title});

			my %type, my $category;
			$type{movie} = 1 if ((defined $programme->{'show_type'}) && ($programme->{'show_type'} eq "Movie"));
			$type{series} = 1 if ((defined $programme->{'show_type'}) && ($programme->{'show_type'} eq "Episode"));
			$type{live} = 1 if defined $programme->{live} && $programme->{live};
			$category = $programme->{'genres'}->[0] if (defined $programme->{'genres'} && scalar @{$programme->{'genres'}} > 0);
			$prog{'category'} = 	[ &Shepherd::Common::generate_category($programme->{title}, $category, %type) ];

			my $season = $programme->{'series_num'};
			my $episode = $programme->{'episode_num'};
			if ($season || $episode) {
				my $xmltv_ns = ($season ? ($season - 1) : "") ." . ". ($episode ? ($episode - 1) : "") ." . 0";
				$prog{'episode-num'} = [ [ $xmltv_ns, 'xmltv_ns' ] ];
			}

			$prog{'subtitles'} = 	[ { 'type' => 'teletext' } ] if defined $programme->{captioning} && $programme->{captioning};

			$prog{'rating'} =	[[ $programme->{rating}, 'ABA', undef ]] if defined $programme->{rating} && $programme->{rating} ne "";

			$prog{'previously-shown'} = { } if defined $programme->{repeat} && $programme->{repeat};

			$writer->write_programme(\%prog);
		}
	}
}

######################################################################################################

sub log
{
	&Shepherd::Common::log(@_);
}
