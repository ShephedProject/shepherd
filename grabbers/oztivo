#!/usr/bin/env perl
# vi: ts=4 sw=4
#
# OzTivo Programme Guide Grabber for Shepherd
# Chris Williams <shepherd@psychogeeks.com>
# Copyright Chris Williams, 2008.
#
# http://www.oztivo.net		OzTiVo TWiki
# http://tvguide.oztivo.net	TV Guide site, needs twiki login/password
# http://xml.oztivo.net/xmltv	XML files cache machine, copy from main machine
# http://www.oztivo.net/xmltv	XML files main machine (will be removed end of June 2008)

use strict;
use warnings;

use Getopt::Long;
use Shepherd::Common;
use XML::LibXML;
use URI::Escape;
use POSIX;
use Time::Local;

# ensure 'cache' directory exists (or is created) before the 'use HTTP::Cache'
# below or it'll fail
BEGIN {
	-d "cache" or mkdir "cache" or die "Cannot create directory cache: $!";
}

# Setup caching so we are good Netizens
# This works transparently under the LWP::* modules
#
use HTTP::Cache::Transparent (
	BasePath  => "cache",
	MaxAge	  => 8*24, # hours
	Verbose   => 0,
	NoUpdate  => 15*60,
	ApproveContent => sub { return $_[0]->is_success },
);


################################################################################
# Global variables
#
my $progname = 'oztivo';
my $nicename = 'OzTivo';
my $version = '2.64';
my $config_file = "$progname.pw";
my $output_file = undef;
my $channels_file;
my $ver;
my $ready_check;
my $configure;
my $region = undef;
my $days = 7;

# Channel to XMLTvID map from channels file
#
my $channels, my $opt_channels;

# User name and password from configuration file
#
my $user;
my $pw;

my $state = Shepherd::Common::which_state($region);
if ($state eq 'VIC') { $state = 'Vic' };
if ($state eq 'QLD') { $state = 'Qld' };
if ($state eq 'TAS') { $state = 'Tas' };

################################################################################
# Setup a mapping file to go from a Shepherd channel name to an OzTivo name
# Taking into consideration the region.
#
# The order of search for a mapping is;
# 	Region specific mapping (under numeric region code keys)
#	National mapping (under hash key 'National')
#	Pay TV mapping (under hash key 'PAY')
# First mapping found wins.
#
my %s_to_o_map = (
	'National' => {	# National channel mappings, all timeshifted
		'10 Peach'				=> 'ELEVEN',
		'7flix'					=> '7flix',
		'7flixPrime'				=> '7flix', 	#Assuming this is the same as 7flix
		'7mate'					=> '7mate',
		'9Go!'					=> 'GO',
		'9Life'					=> '9Life',
		'ABC COMEDY/ABC KIDS'			=> 'ABC2',
		'ABCME'					=> 'ABC3',
		'ABCNEWS'				=> 'ABC-News24',
		'Extra'					=> 'Extra',
		'Imparja'				=> 'IMP',
		'NITV'					=> 'NITV',
		'10 Bold'				=> 'One-'.$state,
		'10 HD'					=> 'Ten-'.$state,
		'10'					=> 'Ten-'.$state,
		'7HD'					=> 'Seven-'.$state,
		'7TWO' 					=> '7TWO-'.$state,
		'9Gem' 					=> 'GEM-'.$state,
		'9HD'					=> 'Nine-'.$state,
		'ABC HD'				=> 'ABC-'.$state,
		'ABC'					=> 'ABC-'.$state,
		'Nine'					=> 'Nine-'.$state,
		'SBS Food' 				=> 'SBSF-'.$state,
		'SBS HD' 				=> 'SBS-'.$state,
		'SBS'					=> 'SBS-'.$state,
		'SBSVICELAND' 				=> 'SBSTWO-'.$state,
		'SBSVICELANDHD' 			=> 'SBSTWO-'.$state,
		'Seven'					=> 'Seven-'.$state,
		'WIN Bold' 				=> 'One-'.$state, 	#Assuming this is the same as 10 bold
		'WIN HD'				=> 'WIN-'.$state,
		'WIN Peach'				=> 'ELEVEN', 		#Assuming this is the same as 10 peach
		'WIN'					=> 'WIN-'.$state,
	},
	'ACT' => {
		'SBS Food'				=> 'SBSF-Can',
		'10 Bold'				=> 'One-NSW',
		'SBSVICELAND'				=> 'SBSTWO-NSW',
		'SBSVICELANDHD'				=> 'SBSTWO-NSW',
	},
	'NSW' => {
	},
	'NT' => {
		'10 Bold'				=> 'One-Dar',
	},
	'QLD' => {
	},
	'SA' => {
	},
	'TAS' => {
	},
	'VIC' => {
	},
	'WA' => {
		'WTV'					=> 'WTV',
	},
	'63' => {	# NSW: Broken Hill
	},
	'66' => {	# NSW: Central Coast
		'NBN'					=> 'NBN',
		'PRIME7'				=> 'PrimeN',
		'Nine'					=> 'Nine-Syd',
		'9HD'					=> 'Nine-Syd',
		'PRIME7 HD'				=> 'PrimeN',
		'Seven'					=> 'Seven-Syd',
		'7HD'					=> 'Seven-Syd',
	},
	'67' => {	# NSW: Griffith
		'Sky News'				=> 'SKYN',
	},
	'69' => {	# NSW: Tamworth
		'NBN'					=> 'NBN',
		'PRIME7'				=> 'PrimeN',
		'PRIME7 HD'				=> 'PrimeN',
		'Sky News'				=> 'SKYN',
	},
	'71' => {	# NSW: Wollongong
		'PRIME7'				=> 'PrimeS',
		'PRIME7 HD'				=> 'PrimeS',
		'Sky News'				=> 'SKYN',
	},
	'73' => {	# NSW: Sydney
		'Nine'					=> 'Nine-Syd',
		'9HD'					=> 'Nine-Syd',
		'Seven'					=> 'Seven-Syd',
		'7HD'					=> 'Seven-Syd',
		'10'					=> 'SC10-NSW',
	},
	'74' => {	# NT: Darwin
		'DDT'					=> 'Ten-Dar',
	},
	'75' => {	# QLD: Brisbane
		'Seven' 				=> 'Seven-Bris',
		'7HD' 					=> 'Seven-Bris',
		'QCTV'					=> 'BRIZ',
	},
	'78' => {	# QLD: Gold Coast
		'NBN'					=> 'NBN-GC',
		'PRIME7'				=> 'Prime-GC',
		'PRIME7 HD'				=> 'Prime-GC',
		'Sky News'				=> 'SKYN',
	},
	'79' => {	# QLD: Cairns
		'Sky News'				=> 'SKYN',
	},
	'81' => {	# SA: Adelaide
	},
	'82' => {	# SA: Renmark
	},
	'83' => {	# SA: Riverland
		'Sky News'				=> 'SKYN',
	},
	'85' => {	# SA: South East SA
		'Sky News'				=> 'SKYN',
	},
	'86' => {	# SA: Spencer Gulf
	},
	'88' => {	# Tasmania
		'Sky News'				=> 'SKYN',
		'TDT'					=> 'TDT-Tas',
		'TDTHD'					=> 'TDT-Tas',
	},
	'90' => {	# VIC: Ballarat
		'PRIME7'				=> 'Prime-Vic',
		'PRIME7 HD'				=> 'Prime-Vic',
		'Sky News'				=> 'SKYN',
	},
	'93' => {	# VIC: Geelong
		'Channel 31'				=> '31-Mel',
	},
	'94' => {	# VIC: Melbourne
		'Channel 31'		=> '31-Mel',
		'Nine'					=> 'Nine-Mel',
		'9HD'					=> 'Nine-Mel',
		'Seven'					=> 'Seven-Mel',
		'7HD'					=> 'Seven-Mel',
	},
	'95' => {	# VIC: Mildura/Sunraysia
		'PRIME7'				=> 'Prime-Vic',
		'PRIME7 HD'				=> 'Prime-Vic',
		'Sky News'				=> 'SKYN',
	},
	'98' => {	# VIC: Gippsland
		'PRIME7'				=> 'Prime-Vic',
		'PRIME7 HD'				=> 'Prime-Vic',
		'Sky News'				=> 'SKYN',
	},
	'101' => {	# WA: Perth
	},
	'102' => {	# WA: Regional
		'GWN7'					=> 'GWN-WA',
		'Sky News'				=> 'SKYN',
	},
	'106' => {	# NSW: Remote and Central
		'PRIME7'				=> 'PrimeS',
		'PRIME7 HD'				=> 'PrimeS',
	},
	'107' => {	# SA: Remote & Central
		'SCTV'					=> 'Seven-SA',
	},
	'108' => {	# NT: Remote & Central
	},
	'114' => {	# QLD: Remote & Central
		'Sky News'				=> 'SKYN',
	},
	'126' => {	# ACT
		'PRIME7'				=> 'Prime-Can',
		'PRIME7 HD'				=> 'Prime-Can',
		'Sky News'				=> 'SKYN',
		'ABC'					=> 'ABC-Can',
		'SBS'					=> 'SBS-Can',
		'SBS HD'				=> 'SBS-Can',
		'WIN'					=> 'WIN-Can',
	},
	'184' => {	# NSW: Newcastle
		'NBN'					=> 'NBN',
		'PRIME7'				=> 'PrimeN',
		'PRIME7 HD'				=> 'PrimeN',
		'10 Bold'				=> 'One-Newc',
		'Sky News'				=> 'SKYN',
	},
	'253' => {	# QLD: Mackay
		'Sky News'				=> 'SKYN',
	},
	'254' => {	# QLD: Rockhampton
	},
	'255' => {	# QLD: Sunshine Coast
		'Sky News'				=> 'SKYN',
	},
	'256' => {	# QLD: Toowoomba
		'Sky News'				=> 'SKYN',
	},
	'257' => {	# QLD: Townsville
		'Sky News'				=> 'SKYN',
	},
	'258' => {	# QLD: Wide Bay
		'Sky News'				=> 'SKYN',
	},
	'259' => {	# NSW: Far South Coast
		'PRIME7'				=> 'Prime-Can',
		'PRIME7 HD'				=> 'Prime-Can',
		'Sky News'				=> 'SKYN',
	},
	'261' => {	# NSW: Lismore/Coffs Harbour
		'NBN'					=> 'NBN',
		'PRIME7'				=> 'PrimeN',
		'PRIME7 HD'				=> 'PrimeN',
		'Sky News'				=> 'SKYN',
	},
	'262' => {	# NSW: Orange/Dubbo
		'PRIME7'				=> 'PrimeS',
		'PRIME7 HD'				=> 'PrimeS',
		'Sky News'				=> 'SKYN',
	},
	'263' => {	# NSW: Taree/Port Macquarie
		'NBN'					=> 'NBN',
		'PRIME7'				=> 'PrimeN',
		'PRIME7 HD'				=> 'PrimeN',
		'Sky News'				=> 'SKYN',
	},
	'264' => {	# NSW: Wagga Wagga
		'PRIME7'				=> 'PrimeS',
		'PRIME7 HD'				=> 'PrimeS',
		'Sky News'				=> 'SKYN',
	},
	'266' => {	# VIC: Bendigo
		'PRIME7'				=> 'Prime-Vic',
		'PRIME7 HD'				=> 'Prime-Vic',
		'Sky News'				=> 'SKYN',
	},
	'267' => {	# VIC: Shepparton
		'PRIME7'				=> 'Prime-Vic',
		'PRIME7 HD'				=> 'Prime-Vic',
		'Sky News'				=> 'SKYN',
	},
	'268' => {	# VIC: Albury/Wodonga
		'PRIME7'				=> 'Prime-Vic',
		'PRIME7 HD'				=> 'Prime-Vic',
		'Sky News'				=> 'SKYN',
	},
	'PAY' => {	# Pay channels
		 '111funny2' => 'HITS+2',
		 '111funny' => 'HITS',
		 '13THSTREET' => '13THST',
		 '13thSTREET2' => '13THST+2',
		 'ACC' => 'ACC',
		 #'' => 'ADULT',
		 #'' => 'ADULT1',
		 #'' => 'ADULT2',
		 'Action' => 'FMACT',
		 'Action2' => 'FMACT+2',
		 #'ActionHD' => '',
		 'AE' => 'AandE',
		 #'AEHD' => '',
		 #'AE2' => ''
		 'AIR' => 'AIRACT',
		 'AlJazeera' => 'ALJA',
		 'AnimalPlanet' => 'ANIMAL',
		 'AntennaPacific' => 'ANT',
		 #'APAC' => 'A-PAC',
		 #'' => 'ARCADE',
		 'Arena' => 'ARNA',
		 'Arena2' => 'ARNA+2',
		 #'ArenaHD' => '',
		 'Arts' => 'STUDIO',
		 #'ArtsHD' => '',
		 #'' => 'ART',
		 'AURORA' => 'AUR',
		 #'' => 'AV',
		 'BBCFirst' => 'BBCF',
		 #'BBCFirstHD' => ''
		 'BBCKnowledge' => 'BBCK',
		 #'BBCKnowledgeHD' => '',
		 'BBCWorldNews' => 'BBC',
		 #'beINSPORTS1'' => '',
  		 #'beINSPORTS1HD' => '',
		 #'beINSPORTS2' => '',
         #'beINSPORTS2HD' => '',
		 #'beINSPORTS3' => '',
		 #'beINSPORTS3HD' => '',
		 #'Binge' => '',
		 #'BingeHD' => '',
		 #'' => 'BETHTV',
		 'Bio' => 'BIOG',
		 'BloombergTelevision' => 'BLM',
		 #'' => 'BNTV',
		 'Boomerang' => 'BOOM',
		 'BoxSets' => 'BOXS',
		 #'BoxSetHD' => '',
		 #'' => 'CANALSUR',
		 'CartoonNetworkK' => 'CART',
		 'Cbeebies' => 'CBEEB',
		 #'' => 'CCTV4',
		 #'CCD' => '',
		 #'CCTV-9Doco' => '',
		 'CCTVNews' => 'CCTVN',
		 #'ChannelV' => 'V',
		 #'' => 'Cinemax',
		 #'' => 'CLUBV',
		 #'ChelseaTV' => '',
		 #'ChelseaTVHD' => '',
		 'CMC' => 'CMC',
		 #'' => 'CMTE',
		 #'' => 'CMTER1',
		 #'' => 'CMTER2',
		 #'' => 'CMTER3',
		 #'' => 'CMTER4',
		 'CNBC' => 'CNBC',
		 'CNN' => 'CNNI',
		 #'' => 'CNNfn',
		 'Comedy' => 'FMCOM',
		 #'ComedyHD' => '',
		 'TheComedyChannel' => 'CMDY',
		 'ComedyCh2' => 'CMDY+2',
		 'Crime' => 'CRIME',
		 #'' => 'CVISION',
		 #'' => 'D4NEWS',
		 #'Daystar' => '',
		 #'' => 'DAAI',
		 #'' => 'DIG',
		 #'' => 'Digital4',
		 #'' => 'DIG-jazz',
		 'Discovery2' => 'DISC+2',
		 'DiscoveryChannel' => 'DISC',
		 #'DiscoveryHD' => '',
		 'DiscoveryHealth' => 'HEALTH',
		 'DiscoveryKids' => 'DKIDS',
		 #'DiscoveryRealTime' => 'DISCRT',
		 'DiscoveryScience' => 'SCIENCE',
		 'DiscoveryTurbo' => 'DTM',
		 #'DiscoveryWorldHD' => '',
		 'DiscoveryTurbo2' => 'DTM+2',
 		 #'DisneyMov2'' => '',
		 'DisneyChannel' => 'DISN',
		 'DisneyJunior' => 'DJNR',
		 #'DisneyMovies2' => '',
 		 'DisneyXD' => 'DISXD',
		 #'' => 'DWTV',
		 'E!Entertainment' => 'E!',
		 #'' => 'ENEWS-GE',
		 #'' => 'ENEWSI',
		 #'' => 'ENEWS-IT',
		 #'' => 'ENEWSS',
		 #'' => 'ENEWS-SP',
		 #'' => 'ERITV',
		 #'' => 'ERTW',
		 'ESPN' => 'ESPN',
		 'ESPN2' => 'ESPN2',
		 #'ESPNHD' => '',
		 #'ESPN2HD' => '',
		 #'' => 'EURONEWS',
		 'Eurosport' => 'EUROSPORT',
		 #'EurosportHD' => '',
		 'Eurosportnews' => 'ESNEWS',
		 #'' => 'EWTN',
		 'EXPO' => 'EXPO',
		 'Family' => 'FMFAM',
		 'Family2' => 'FMFAM+2',
		 #'FamilyHD' => '',
		 #'FashionTV' => 'FASH',
		 #'FMC' => 'FMC',
		 'FOX82' => 'FOX8+2',
		 'FOX8' => 'FOX8',
		 #'FOX8HD' => '',
		 'FOXClassics2' => 'CLAS+2',
		 'FOXClassics' => 'CLAS',
		 'FoxFooty' => 'FFC',
		 #'FoxFootyHD' => '',
		 'FOXNews' => 'FOXN',
		 'FoxSports1' => 'FS1',
		 #'FoxSports1HD' => '',
		 'FoxSports2' => 'FS2',
		 #'FoxSports2HD' => '',
		 'FoxSports3' => 'FS3',
		 #'FoxSports3HD' => '',
		 'FoxSports4' => 'FS4',
		 #'FOXSPORTS4HD' => '',
		 'FoxSports5' => 'FS5',
		 #'FOXSPORTS4HD' => '',
		 'FoxSportsNews' => 'FSN',
		 #'FoxSportsNewsHD' => '',
		 'DisneyMovies' => 'DISMOV',
		 #'DisneyMoviesHD' => '',
		 #'FOXSPORTSPLUS' => '',
		 'FUELTV' => 'FUEL',
		 'FX' => 'FX',
		 'FX2' => 'FX+2',
		 #'FXHD' => '',
		 #'' => 'GUIDE',
		 #'' => 'GWORLD',
		 #'' => 'HIST+2',
		 #'' => 'HOUSE',
		 #'HOWTOChannel' => 'HOWTO',
		 #'' => 'IMP',
		 #'' => 'ISHTAR',
		 #'' => 'JJJ',
		 'KidsCo' => 'KIDSCO',
		 #'' => 'LBC',
		 #'' => 'LEONARDO',
		 'LifestyleChannel' => 'LIFE',
		 'LifestyleChannel2' => 'LIFE+2',
		 #'LifestyleHD' => '',
		 'LifestyleHome' => 'LHOME',
		 'LifestyleFOOD2' => 'FOOD+2',
		 'LifestyleFOOD' => 'FOOD',
		 'LifestyleYOU' => 'LYOU',
		 'LifstyleYOU2' => 'LYOU+2',
		 #'LFCTV' => '',
		 #'LFCTVHD' => '',
		 #'' => 'LNTV',
		 #'' => 'MACQD',
		 #'' => 'MAIN',
		 #'MainEvent' => '',
   		 #'MUTV' => '',
		 #'MUTVHD' => '',
		 'Masterpiece' => 'FMMAST',
		 #'MasterpieceHD' => '',
		 'MAX' => 'max',
		 #'MoreMovies' => '',
		 #'MoreMoviesHD' => '',
		 #'' => 'MCMTop',
		 #'' => 'MCMTOP',
		 #'' => 'MINDGAMES',
		 #'MOVIEEXTRA' => 'MOVX',
		 #'MOVIEGREATS' => 'MOVG',
		 #'MOVIEONE' => 'MOV1',
		 #'MOVIEONEHD' => '',
		 #'MOVIETWO' => 'MOV1+2',
		 #'MTVClassic' => 'MTVC',
		 'MTV' => 'MTV',
		 'MTVDance' => 'MTVD',
		 #'MTVHits' => 'MTVH',
		 'MTVMusic' => 'MTVM',
		 #'MTVNLive' => 'MTVN',
		 #'MTVNLiveHD' => '',
		 #'' => 'NASIA',
		 'NatGeoAdventure' => 'ADV1',
		 #'NatGeoAdventure2' => '',
		 'NatGeoWild' => 'NGW',
		 #'NatGeoWildHD' => '',
		 'NationalGeographic' => 'NGEO',
		 'NatGeo2' => 'NGEO+2',
		 'NatGeoPeople' => 'NGP',
		 #'NatGeoHD' => '',
		 #'' => 'NBN',
		 #'' => 'NBN-GC',
		 'NHKWorld' => 'HNKW',
		 'Nickelodeon' => 'NICK',
		 'NickJr' => 'NICKJR',
		 'NITV' => 'NITV',
		 #'' => 'ODY',
		 #'' => 'OLY1',
		 #'' => 'OLY2',
		 #'' => 'OLY3',
		 #'' => 'OLY4',
		 #'' => 'OUT-TV',
		 'Ovation' => 'OVAT',
		 #'PlayhouseDisney' => 'PHDISN',
		 'Premiere' => 'FMPREM',
		 'Premiere2' => 'FMPREM+2',
		 #'PremiereHD' => '',
		 #'' => 'PREVIEW',
		 #'RAI' => 'RAI',
		 'Romance' => 'FMDRA',
		 #'RomanceHD' => '',
		 #'RussiaToday' => '',
		 #'' => 'RMTV',
		 #'' => 'RTPI',
		 'SetantaSports' => 'STAS',
		 #'' => 'SENATE',
		 #'' => 'ServiceNSW',
		 'showcase' => 'SHWC',
		 #'showcaseHD' => '',
		 'showcase2' => 'SHWC+2',
		 #'showtimeaction' => 'SACT',
		 #'showtimeactionHD' => '',
		 #'showtimecomedy' => 'SCOM',
		 #'showtimedrama' => 'SDRA',
		 #'showtimepremiere' => 'SHOW',
		 #'ShowPremiereHD' => '',
		 #'showtimetwo' => 'SHW2',
		 #'' => 'SHWGRTS',
		 'SKYNewsBusiness' => 'SKYB',
		 #'SkyBusinessHD' => '',
		 #'SKYNewsLive' => 'SKYN',
		 #'SKYNewsHD' => '',
		 #'SKYRacing' => 'SKYR',
		 #'SKYRacing2' => '',
		 #'SKYRacingWorld' => '',
		 #'SKYTbredCent' => '',
		 #'SKYTbredCentHD' => '',
     	 #'SKYNewsElection' => '',
     	 #'SKYNewsElectionHD' => '',
		 'SKYWeather' => 'SKYW',
		 #'' => 'SPORTSEL',
		 #'' => 'StarMovies',
		 'SPEED' => 'SPEED',
		 #'SPEEDHD' => '',
		 #'STARPICS1' => 'SPICS',
		 #'STARPICS1HD' => '',
		 #'STARPICS2' => 'SPICS+2',
		 #'STARPICS2HD' => '',
		 #'' => 'StarWorld',
		 #'' => 'STC',
		 #'' => 'STV1',
		 #'STVDIO' => 'STVDIO',
		 'Style' => 'STYLE',
		 'Syfy2' => 'Sci-Fi+2',
		 'Syfy' => 'Sci-Fi',
		 #'SyfyHD' => '',
		 #'' => 'SYRIATV',
		 #'' => 'TABNSW',
		 'TCM' => 'TCM',
		 #'' => 'TDT-Tas',
		 'TheHistoryChannel' => 'HIST',
		 #'HistoryHD' => '',
		 #'TheLifeStyleChannel' => 'LIFE',
		 'Thriller' => 'FMCRIM',
		 #'ThrillerHD' => '',
		 #'TheStyleNetwork' => 'STYLE',
		 #'TheWeatherChannel' => 'TWC',
		 'TLC' => 'TLC',
		 'TLC2' => 'TLC+2',
		 #'TSN' => '',
		 #'' => 'TMF',
		 'TVH!TS2' => 'TV1+2',
		 'TVH!TS' => 'TV1',
		 #'' => 'TV5',
		 #'' => 'TVCHILE',
		 #'' => 'TVE',
		 'TVN' => 'TVN',
		 #'' => 'TVS',
		 'TVSN' => 'TVSN',
		 'UKTV2' => 'UKTV+2',
		 'UKTV' => 'UKTV',
		 #'UKTVHD' => '',
		 'Universal' => 'UNIV',
		 'Universal2' => 'UNIV+2',
		 #'UniversalHD' => '',
		 #'FoxtelSmooth' => '',
		 'VHITS' => 'VHITS',
		 #'VHITS2' => '',
		 #'' => 'VTV',
		 #'' => 'WEIN',
		 #'' => 'WINE',
		 #'' => 'WLINK',
		 'WORLDMOVIES' => 'WMOV',
		 #'WorldMoviesHD' => '',
		 #'' => 'WTV',
		 #'' => 'WZONE',
		 #'YesShop' => '',
	}
);


################################################################################
# Routine for forcing the timezone of a listing to the local time zone.
# This has the effect of mimicing the time-shifting of national programmes
# such as ABC2 for which there is a single programme in, say, Sydney time, but
# where the programmes are broadcast at the same wall clock time everywhere in
# Australia.  
# Care is taken to use the local time zone at the time of the programme.
#
# Also defines a list of OzTivo channels names this kludge should be applied to.
#
sub force_local_timezone($) {
	my $oztivoTime = shift;

	# Split the given time into components ignoring the specified TZ
	# Our input looks like "20080324183000 +1100"
	#
	my ($year, $mon, $mday, $hr, $min, $sec) = $oztivoTime =~ m/^(\d\d\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)/;

	# Treat the time as being local and calculate the UNIX time
	# This will account for DST in our time zone.
	#
	my $unixTime = timelocal($sec, $min, $hr, $mday, $mon-1, $year); # expects months 0..11

	# Return a correctly formatted string
	#
	return strftime('%Y%m%d%H%M%S %z', localtime($unixTime));
}

my %force_timezone_set = map { $_ => 1 } ( values %{$s_to_o_map{'National'}} );


################################################################################
# Routines for configuring this grabber
#
sub please_configure_me
{
	print <<__EOM;
If you wish to use $nicename, please run
	tv_grab_au --configure $progname
Configuration of $progname is required
__EOM
}

sub configure
{
	print <<__EOM;
Configuring...

NOTE: This step is currently optional.

You can create an OzTivo account here:
  http://www.oztivo.net/twiki/bin/view/TWiki/TWikiRegistration
... and select some channels here:
  http://www.oztivo.net/tivo-bin/tvguide.pl
When you're done, enter your username and password here, to
enable this grabber to retrieve your guide data automatically:
Username?
__EOM

	my $username = <>;
	chomp $username;
	unless ($username) {
		print "No username supplied. Exiting configuration.\n";
		exit 3;
	}
	print "Password?\n";
	my $pw = <>;
	chomp $pw;
	unless ($pw) {
		print "No password supplied. Exiting configuration.\n";
		exit 3;
	}
	print "Creating config file $config_file...\n";
	open (CONF, ">$config_file")
		or die "Unable to create $config_file: $!";
	print CONF "$username:$pw";
	close CONF;

	print "Done.\n";
	exit 0;
}

sub load_config() {
	unless (-r $config_file) {
		print "Can't find $config_file!\n";
		please_configure_me();
		exit 1;
	}

	print "Reading configuration file $config_file.\n";

	unless (open(CONF, $config_file)) {
		print "Unable to read config file $config_file: $!\n";
		please_configure_me();
		exit 1;
	}
	my $line = <CONF>;
	close CONF;

	unless ($line =~ /^(.*):(.*)$/) {
		print "Unable to parse config file!\n" .
			  "It should be in the format: username:password\n";
		please_configure_me();
		exit 1;
	}
	($user, $pw) = ($1, $2);

	unless ($user and $pw) {
		print "Failed to extract a sensible username and password from config file.\n";
		please_configure_me();
		exit 1;
	}
}

################################################################################
# Local extension of the shared get_url() to cater for password authentication 
# failure
#
# Returns the data as a string, or undef if data could not be retrieved
#
sub get_url($) {
	my ($data, $success, $status, $bytes);

	my $url = shift;

	# Don't rely on Shepherd::Common::get_url()'s retry, because
	# if we get a 401 (wrong password) there's no point in retrying.
	my $max_tries = 3;
	foreach my $tries (1 .. $max_tries) {
		($data, $success, $status, $bytes) = Shepherd::Common::get_url(
				url => $url,
				referer => "Shepherd ".$nicename." grabber, version ".$version,
				delay => "1-3",
				retries => 0);

		last if ($success);

		print "Download failed: $status\n";
		if ($status =~ /401/)
		{
			print <<__EOM;
Your OzTivo username and/or password may be incorrect
The username and password you supplied when configuring the oztivo grabber
must match your registration details on the OzTivo.com site.
If this error persists, try reconfiguring:
	tv_grab_au --configure $progname
__EOM
			last;	# bail out of the retry loop
		}

		my $sleep = 47 + int(rand(120));
		print "Sleeping for $sleep seconds before retrying...\n";
		sleep($sleep);
	}

	# hack: if we don't get back something that looks like xml then try to
	# ungzip it
	if (substr($data,0,1) ne '<') {
		print "Doesn't look like xml, attempting to gunzip.\n";
		$data = Compress::Zlib::memGunzip($data);
	}

	return $data;
} 



################################################################################
#
$| = 1;

GetOptions(
	'config=s'			=> \$config_file,
	'channels_file=s'	=> \$channels_file,
	'output=s'			=> \$output_file,
	'version'			=> \$ver,
	'ready'				=> \$ready_check,
	'configure'			=> \$configure,
	'region=s'			=> \$region,
	'days:i'			=> \$days,			# Optional
);

print "$nicename Grabber v$version\n";
exit 0 if ($ver);	# Just print the version and leave

# Do the configuration if requested
# Load the configuration otherwise
#
configure() if ($configure);
#load_config();

exit 0 if ($ready_check);	# Just print the version and leave

# Idiot checks on mandatory options
#
unless (defined($output_file)) {
	die "No --output file specified.\n";
}
unless (defined($region)) {
	die "No --region specified.\n";
}

# Import the Shepherd channels configuration
#
unless ($channels_file) { 
	die "No --channels_file specified.\n";
}
unless( -r $channels_file) { 
	die "Unable to read channels file $channels_file: $!";
}
{	# Block localises the variables
	local (@ARGV, $/) = ($channels_file);
	eval <>;
	die "\nError in channels file!\nDetails:\n$@" if ($@);
}


# Create the in-memory form of the output file
#
my $outdom = XML::LibXML::Document->new( '1.0', 'iso-8859-1' );
my $root = $outdom->createElement('tv');
$root->setAttribute('generator-info-name', $progname);
$outdom->setDocumentElement($root);

# Calculate the start and end date for the days requested
# #
my ($mday, $mon, $year) = (localtime)[3..5];
my $startdate = sprintf('%04d-%02d-%02d', $year+1900, $mon+1, $mday);
($mday, $mon, $year) = (localtime(time + ($days-1)*86400) )[3..5];
my $enddate = sprintf('%04d-%02d-%02d', $year+1900, $mon+1, $mday);

# Get the OzTivo datalist.xml file and interrogate it for;
# The base URL for each channel
# The data files available for today onward including their 
#	last modified date.
#

my $datalist = get_url("http://xml.oztivo.net/xmltv/datalist.xml.gz");
unless (defined($datalist)) {
	die "\nError fetching data list xml file!\n";
}

# Make the user credentials safe
#my $credentials = uri_escape($user) .':' . uri_escape($pw);

my $dlparser = XML::LibXML->new();		# For the datalist.xml file
my $progparser = XML::LibXML->new();	# For the programme data files

my $dlxml = $dlparser->parse_string($datalist);
foreach my $sname ( keys(%$channels), keys(%$opt_channels) ) {
	# Work out which OzTivo channel this Shepherd channel is
	# 
	# The order of search for a mapping is;
	# 	Region specific mapping (under numeric region code keys)
	#	National mapping (under hash key 'National')
	#	Pay TV mapping (under hash key 'PAY')
	# First mapping found wins.
	#
	my $oname = $s_to_o_map{$region}->{$sname};
	if (! defined($oname)) {
		$oname = $s_to_o_map{&Shepherd::Common::which_state($region)}->{$sname};
	}
	if (! defined($oname)) {	# Try a National channel
		$oname = $s_to_o_map{'National'}->{$sname};
	}
	if (! defined($oname)) {	# Try a PAY channel
		$oname = $s_to_o_map{'PAY'}->{$sname};
	}
	unless (defined($oname)) {
		print "\nNo region $region mapping from " .
			"Shepherd channel $sname to OzTivo channel\n\n";
		next;
	}

	# What XMLTV id is this channel. May be in either channels hash
	#
	my $xmltvid = defined($channels->{$sname}) ?  
		$channels->{$sname}: $opt_channels->{$sname};
	unless (defined($xmltvid)) {
		print "\nNo XMLTV id for Shepherd channel $sname\n\n";
		next;
	}

	# Construct a clone of select parts of the channel element in the output document.
	# Ignores non-XMLTV elements present in the datalist.xml file.
	#
	my ($channelnode) = $dlxml->findnodes('/tv/channel[@id="' . $oname . '"]');
	unless (defined($channelnode)) {
		print "\nCannot find the $oname channel element in the datalist.xml file\n";
		next;
	}
	my $newnode = $channelnode->cloneNode(0);
	$newnode->setAttribute('id', $xmltvid);
	foreach my $node ($channelnode->findnodes('display-name|url|icon')) {
		$newnode->appendChild($node->cloneNode(1));
	}
	$root->insertBefore($newnode, $root->firstChild);

	
	# Get the first base URL for the channel
	# and mangle our user name and password into it
	#
	my $baseurl = $dlxml->findvalue('/tv/channel[@id="' . $oname . '"]/base-url[1]');
	unless (defined($baseurl)) {
		print "\nCannot find the $oname baseurl in the datalist.xml file\n";
		next;
	}
	#$baseurl =~ s!^(https?://)!$1$credentials\@!;

	# Process the list of data files for today or later
	#
	my @datafornodes = $dlxml->findnodes('/tv/channel[@id="' . $oname . '"]/datafor');
	unless (@datafornodes) {
		print "\nCannot find the $oname datafor records in the datalist.xml file\n";
		next;
	}
	foreach my $datafornode (@datafornodes) {
		my $filedate = $datafornode->findvalue('child::text()');

		if ($filedate ge $startdate && $filedate le $enddate ) {	# Today or future data
			# Build the source file name and fetch it
			# 
			my $url = $baseurl . uri_escape( $oname . '_' . $filedate . '.xml.gz' );
			my $progdata = get_url($url);
			unless ($progdata) {
				print "\nCannot retrieve the $oname programme data for $filedate\n";
				next;
			}

			# We have the data we need to actually build the output file
			#
			my $progxml = $progparser->parse_string($progdata);
			my @prognodes = $progxml->findnodes('/tv/programme');
			unless (@prognodes) {
				print "\nCannot find the $oname programme records in the $filedate file\n";
				next;
			}
			foreach my $prognode (@prognodes) {
				# Remove the node from the source document and make it part of
				# our output document.
				#
				$outdom->adoptNode($prognode);
				$root->appendChild($prognode);

				# If there are <star-rating> element(s) present and they contain 
				# a <value> element with '0/10' then delete the <star-rating>.
				# OzTivo data uses this to mean 'Unrated' rather than 'Terrible programme'.
				# This rating is used by the post-processors and skews their results.
				#
				my @ratings = $prognode->findnodes("star-rating[value='0/10']");
				foreach my $rating (@ratings) {
					$rating->unbindNode();
				}
				

				# Correct the channel attribute to use our desired XMLTV id
				# as specified in the channels.conf file.
				#
				$prognode->setAttribute('channel', $xmltvid);

				# If necessary force the local time zone onto the start and end times
				#
				if ($force_timezone_set{$oname}) {
					my $starttime = force_local_timezone($prognode->getAttribute('start'));
					my $stoptime = force_local_timezone($prognode->getAttribute('stop'));
					$prognode->setAttribute('start', $starttime);
					$prognode->setAttribute('stop', $stoptime);
				}
			}
			$progxml = undef;
		}
	}
}
$dlxml = undef;

# Write the output
#
$outdom->toFile($output_file, 1)
	or die "\nCould not create output file $output_file\n";

