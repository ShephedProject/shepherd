#!/usr/bin/env perl

use strict;
use warnings;

my $progname = "freeview";
my $version = "1.0.7";

use XMLTV;
use POSIX qw(strftime mktime);
use Getopt::Long;
use Data::Dumper;
use Shepherd::Common;
use Shepherd::FreeviewHelper;
use Shepherd::json_pp;  # use JSON;
use DateTimeFormat::XMLTV;
use DateTime::Format::ISO8601;
use DateTime::Duration;
use DateTime::TimeZone;

#
# some initial cruft
#

my $script_start_time = time;
my %stats;
my $channels, my $opt_channels;
my $tv_guide;
my $input_xml;
my $d;
$| = 1;

#
# parse command line
#

my $opt;
$opt->{outputfile} = 	"output.xmltv";	# default
$opt->{days} = 		8;		# default
$opt->{lang} =		"en";
$opt->{region} =	94;

GetOptions(
	'region=i'	=> \$opt->{region},
	'days=i'	=> \$opt->{days},
	'offset=i'	=> \$opt->{offset},
	'paytvtimeoffset:s'	=> \$opt->{paytvoffset},
	'channels_file=s' => \$opt->{channels_file},
	'cachefile=s' => \$opt->{obsolete},
	'output=s'	=> \$opt->{outputfile},
	'fast'		=> \$opt->{fast},
	#'paytv'		=> \$opt->{paytv},
	'warper'	=> \$opt->{warper},
	'lang=s'	=> \$opt->{lang},
	'obfuscate'	=> \$opt->{obfuscate},
	'debug+'	=> \$opt->{debug},
	'help'		=> \$opt->{help},
	'verbose'	=> \$opt->{help},
	'version'	=> \$opt->{version},
	'ready'		=> \$opt->{version},
	'desc'		=> \$opt->{desc},
	'v'		=> \$opt->{help});

&help if (defined $opt->{help});

if (defined $opt->{version} || defined $opt->{desc}) {
	printf "%s %s\n",$progname,$version;
	printf "%s is a details-aware grabber that collects very high quality data (full title/subtitle/description/genre and year/cast/credits data) using the Freeview website.",$progname if (defined $opt->{desc});
	exit(0);
}



die("region not supported") unless defined $Shepherd::FreeviewHelper::SHEP_ID_TO_STATE{$opt->{region}};

# set defaults
Shepherd::Common::set_default("debug", ($opt->{debug} * 2)) if (defined $opt->{debug});
Shepherd::Common::set_default("webwarper", 1) if (defined $opt->{warper});
Shepherd::Common::set_default("squid", 1) if (defined $opt->{obfuscate});
Shepherd::Common::set_default("referer", "last");
Shepherd::Common::set_default("retry_delay", 10);
Shepherd::Common::setup_ua('agent' => 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-us)');

die "no channel file specified, see --help for instructions\n", unless (defined $opt->{channels_file});

$opt->{days} = 8 if $opt->{days} > 8;	# no data beyond 8 days

Shepherd::Common::log(sprintf "going to grab %d days%s of data into %s (%s%s) region %s",
	$opt->{days},
	($opt->{offset} ? " (skipping first $opt->{offset} days)" : ""),
	$opt->{outputfile},
	(defined $opt->{fast} ? "with haste" : "slowly"),
	(defined $opt->{warper} ? ", anonymously" : ""),
	$opt->{region});

if (-r $opt->{channels_file}) {
	local (@ARGV, $/) = ($opt->{channels_file});
	no warnings 'all'; eval <>; die "$@" if $@;
} else {
	die "WARNING: channels file $opt->{channels_file} could not be read\n";
}

my $region_timezone = DateTime::TimeZone->new('name'=>Shepherd::Common::which_timezone($opt->{region}));
my $sydney_timezone = DateTime::TimeZone->new('name'=>'Australia/Sydney');

my $offset = defined $opt->{offset} ? $opt->{offset} : 0;

my $channels_url = "https://fvau-api-prod.switch.tv/content/v1/channels/region/%s?limit=100&offset=0&include_related=1&expand_related=full&related_entity_types=images";

my @available_channels;

{
	my $url = sprintf $channels_url, $Shepherd::FreeviewHelper::SHEP_ID_TO_STATE{$opt->{region}};
	my ($data, $success, $status_msg, $bytes_fetched, $seconds_slept, $failed_attempts, $response) =
		Shepherd::Common::get_url(url => $url, retries => 5);
	$stats{failed_requests} += $failed_attempts;
	$stats{slept_for} += $seconds_slept;
	$stats{bytes_fetched} += $bytes_fetched;

	unless ($data){
		Shepherd::Common::log("Aborting: likely format change or blocked! Failed to get channel list");
		exit 10;
	}

	my $parsed = JSON::cut_down_PP::decode_json($data);
	unless (defined $parsed->{data}){
		Shepherd::Common::log("Aborting: likely format change or blocked! Failed to parse channel list");
		exit 10;
	}
	@available_channels = @{$parsed->{data}}
}

my $today = DateTime->today();

foreach my $chan (@available_channels){
	my $cleaned_name = Shepherd::FreeviewHelper::clean_channel_name($chan->{channel_name});
	my $cleaned_code = Shepherd::FreeviewHelper::clean_channel_name($chan->{channel_code});

	my $shep_channel;
	$shep_channel = $channels->{$cleaned_code} if (defined $channels->{$cleaned_code});
	unless ($shep_channel){
		$shep_channel = $channels->{$cleaned_name} if (defined $channels->{$cleaned_name});
	}

	unless ($shep_channel){
		Shepherd::Common::log("ignoring unwanted/unknown channel '$chan->{channel_name}'");
		$stats{skipped_channels}++;
		next;
	}

	$chan->{shepherd} = $shep_channel;

	for (my $day_i = $offset; $day_i < 8 && $day_i < $opt->{days}+$offset; $day_i++){
		if (!defined $opt->{fast}) {
			my $sleeptimer = int(rand(5)) + 1;  # sleep anywhere from 1 to 5 seconds
			$stats{slept_for} += $sleeptimer;
			sleep $sleeptimer;
		}
		my $startdate = $today->clone()->add('days'=>$day_i)->iso8601().'Z';
		$startdate =~ s/:/%3A/;
		my $enddate = $today->clone()->add('days'=>$day_i+1)->iso8601().'Z';
		$enddate =~ s/:/%3A/;
		get_day_data($day_i, $chan, $startdate, $enddate, 0);
	}
}


&write_data;
Shepherd::Common::print_stats($progname, $version, $script_start_time, %stats);
exit(0);


sub get_day_data {
	my ($day_i, $chan, $startdate, $enddate, $data_offset) = @_;
	my $url = sprintf "https://fvau-api-prod.switch.tv/content/v1/epgs/%s?start=%s&end=%s&sort=start&related_entity_types=episodes%%2Cshows&related_levels=1&include_related=1&expand_related=full&limit=100&offset=%d", $chan->{dvb_triplet}, $startdate, $enddate, $data_offset;
	# get data
	my $tries = 5;
	my ($data, $success, $status_msg, $bytes_fetched, $seconds_slept, $failed_attempts, $response) =
		Shepherd::Common::get_url(url => $url, retries => ($tries - 1));

	$stats{failed_requests} += $failed_attempts;
	$stats{slept_for} += $seconds_slept;
	$stats{bytes_fetched} += $bytes_fetched;

	if ((!$data) || (!$success)) {
		Shepherd::Common::log("Failed to fetch '$url' after $tries attempts.");

		# if its our first page, abort now
		if ($day_i == 0) {
			Shepherd::Common::log("Aborting: likely format change or blocked!");
			exit 10;
		}
		return;
	}

	unless (($data) && (length($data) > 1)) {
		print STDERR "ERROR: no data to parse.\n";
		return;
	}

	# my $decoded_data = decode_json($data);
	my $decoded_data = JSON::cut_down_PP::decode_json($data);

	parse_json_data($decoded_data, $chan);

	if (defined $decoded_data->{meta} && defined $decoded_data->{meta}->{pagination} && defined $decoded_data->{meta}->{pagination}->{more} && $decoded_data->{meta}->{pagination}->{more}){
		get_day_data($day_i, $chan, $startdate, $enddate, $data_offset+$decoded_data->{meta}->{pagination}->{limit})
	}
}

sub grep_category_field {
	my ($categories, $prefix) = @_;
	my @matches = grep { $_ =~ m/^$prefix\//; } @{$categories};
	if (scalar @matches){
		$matches[0] =~ s/^$prefix\///;
		return $matches[0];
	}
	return 0;
}

sub parse_json_data {
	my $decoded_data = shift;
	my $chan = shift;

	my $channel = $chan->{shepherd};

    #national channel has region_national in its 'tags' array
    my $is_national_channel = $chan->{channel_code} ne 'ABC NEWS' && scalar grep($_ eq 'region_national', @{$chan->{tags}});

	foreach my $programme (@{$decoded_data->{data}}) {

		my $event_id = $programme->{id}.$programme->{start};

		if (defined $programme->{related}->{shows}->[0]->{title}){
			$tv_guide->{$channel}->{data}->{$event_id}->{'title'} = 	[[ $programme->{related}->{shows}->[0]->{title}, $opt->{lang} ]];
		} elsif (defined $programme->{related}->{episodes}->[0]->{title}){
			$tv_guide->{$channel}->{data}->{$event_id}->{'title'} = 	[[ $programme->{related}->{episodes}->[0]->{title}, $opt->{lang} ]];
		} elsif (defined $programme->{title}){
			$tv_guide->{$channel}->{data}->{$event_id}->{'title'} = 	[[ $programme->{title}, $opt->{lang} ]];
		} else {
			Shepherd::Common::log("no title found $programme->{id}, skipping");
			next;
		}

		$stats{programmes}++;
		$stats{duplicate_programmes}++ if ($tv_guide->{$channel}->{data}->{$event_id});

		my $event_start = DateTime::Format::ISO8601->parse_datetime( $programme->{start} );
		my $event_end = DateTime::Format::ISO8601->parse_datetime( $programme->{end} );

		#process time shift if national channel
		if ($is_national_channel) {
			my $offset_start = $sydney_timezone->offset_for_datetime($event_start) - $region_timezone->offset_for_datetime($event_start);
			$event_start->add('seconds'=>$offset_start);
			my $offset_end = $sydney_timezone->offset_for_datetime($event_end) - $region_timezone->offset_for_datetime($event_end);
			$event_end->add('seconds'=>$offset_start);
		}

		# store it in the correct XMLTV schema!
		$tv_guide->{$channel}->{data}->{$event_id}->{'channel'} = $channel;

		$tv_guide->{$channel}->{data}->{$event_id}->{'start'} = DateTimeFormat::XMLTV->format_datetime($event_start);
		$tv_guide->{$channel}->{data}->{$event_id}->{'stop'} = 	DateTimeFormat::XMLTV->format_datetime($event_end);

		if (defined $programme->{related}->{episodes}->[0]) {
			my $episode = $programme->{related}->{episodes}->[0];

			if (defined $episode->{synopsis} && length($episode->{synopsis}) > 0) {
				if ($episode->{synopsis} =~ s/\s*\(([12][90]\d{2})\)$//){#if synopsis ends with a year, its the date field
					$tv_guide->{$channel}->{data}->{$event_id}->{date} = $1;
				}
				$tv_guide->{$channel}->{data}->{$event_id}->{'desc'} = [ [ $episode->{synopsis}, $opt->{lang} ] ] if $episode->{synopsis};#check if again as may be empty
			}

			#episode titles arent a thing atm, but separate field exits, use episode objects title if it differs just in case
			if (defined $episode->{title} && $episode->{title} ne $tv_guide->{$channel}->{data}->{$event_id}->{'title'}->[0]->[0]) {
				$tv_guide->{$channel}->{data}->{$event_id}->{'sub-title'} = [ [ $episode->{title}, $opt->{lang} ] ];
			}

			if (defined $episode->{categories}) {
				my %genre, my $category;
				$genre{movie} = 1 if (grep_category_field($episode->{categories}, "content_type") eq "movie");
				$genre{series} = 1 if (grep_category_field($episode->{categories}, "content_type") eq "series");
				$category = grep_category_field($episode->{categories}, "genres");
				$tv_guide->{$channel}->{data}->{$event_id}->{'category'} = [ &Shepherd::Common::generate_category($programme->{title}, $category, %genre) ];

				my $rating = grep_category_field($episode->{categories}, "classification");
				if ($rating){
					$tv_guide->{$channel}->{data}->{$event_id}->{'rating'} =	[[ $rating, 'ABA', undef ]];
				}
			}

			if (defined $episode->{'episode_number'}) {
				my $season = grep_category_field($episode->{categories}, "season_number");
				my $episode_number = $episode->{'episode_number'};
				if ($episode_number) {
					my $xmltv_ns = ($season ? ($season - 1) : "") . " . " . ($episode_number ? ($episode_number - 1) : "") . " . 0";
					$tv_guide->{$channel}->{data}->{$event_id}->{'episode-num'} = [ [ $xmltv_ns, 'xmltv_ns' ] ];
				}
			}
		}

		if (defined $programme->{'tags'}){
			for my $attribute (@{$programme->{'tags'}}){
				if ($attribute eq "captioned"){
					$tv_guide->{$channel}->{data}->{$event_id}->{'subtitles'} = 	[ { 'type' => 'teletext' } ];
				} elsif ($attribute eq "hd"){#not seen, but maybe?
					$tv_guide->{$channel}->{data}->{$event_id}->{video}->{quality} = "HDTV";
				}
			}
		}

		$d->{seen_progs}->{$channel}++;
	}

}

######################################################################################################
# help

sub help
{
	print<<EOF
$progname $version

$0 [options]
    options are as follows:
	--region=N			set region for where to collect data from (default: $opt->{region})
	--channels_file=file		where to get channel data from (MANDATORY)
	--days=N			fetch 'n' days of data (default: $opt->{days})
	--output=file			send xml output to file (default: "$opt->{outputfile}")

	--fast				don't run slow - get data as quick as you can - not recommended
	--debug				increase debug level
	--warper			fetch data using WebWarper web anonymizer service
	--obfuscate			pretend to be a proxy servicing multiple clients
	--lang=[s]			set language of xmltv output data (default $opt->{lang})

	--paytvtimeoffset		apply an offset between current timezone and AEST for paytv channels
	--paytvtimeoffset[="+HHMM"]	apply a difference of +HHMM and AEST for paytv channels ie +1030 (+- is mandatory)

EOF
	;

	exit(0);
}

sub write_data
{
	my %writer_args = ( encoding => 'ISO-8859-1' );
	if ($opt->{outputfile}) {
		my $fh = new IO::File(">$opt->{outputfile}")  or die "can't open $opt->{outputfile}: $!";
		$writer_args{OUTPUT} = $fh;
	}

	my $writer = new XMLTV::Writer(%writer_args);

	$writer->start
		( { 'source-info-name'   => "$progname $version",
			'generator-info-name' => "$progname $version"} );

	for my $channel (sort keys %{$channels}) {
		$writer->write_channel( {'display-name' => [[ $channel, $opt->{lang} ]], 'id' => $channels->{$channel}} )
			if (defined $d->{seen_progs}->{$channel});
	}
	for my $channel (sort keys %{$opt_channels}) {
		$writer->write_channel( {'display-name' => [[ $channel, $opt->{lang} ]], 'id' => $opt_channels->{$channel}} )
			if (defined $d->{seen_progs}->{$channel});
	}



	for my $channel (sort keys %{($d->{seen_progs})}) {
		for my $event_id (sort {$a cmp $b} keys %{($tv_guide->{$channel}->{data})}) {
			my $show = $tv_guide->{$channel}->{data}->{$event_id};
			Shepherd::Common::cleanup($show);
			$writer->write_programme($show);
		}
	}

	$writer->end();
}
